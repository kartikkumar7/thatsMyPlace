/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.UniversityAdminRole;

import Business.Booking.Booking;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Student.Student;
import Business.ThatsMyPlaceSystem;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Karti
 */
public class ManageStudentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageStudentJPanel
     */
    private JPanel rightPanel;
    private Enterprise enterprise;
    private ThatsMyPlaceSystem business;
    public ManageStudentJPanel(JPanel rightPanel, Enterprise enterprise, ThatsMyPlaceSystem business) {
        initComponents();
        this.rightPanel = rightPanel;
        this.enterprise = enterprise;
        this.business = business;
        populate();
    }
    public void populate() {
        DefaultTableModel dtm = (DefaultTableModel) StudentListjTable.getModel();
        dtm.setRowCount(0);
        
        ArrayList<Employee> employeeList = enterprise.getEmployeeDirectory().getEmployeeList();
        
        for (Employee e: employeeList) {
            Object[] row = new Object[dtm.getColumnCount()];
            Student student = (Student) e;
            row[0] = e.getId();
            row[1] = e;
            row[2] = student.getBookingHistory().totalClosed();
            row[3] = student.getBookingHistory().totalCanceled();
            row[4] = student.getBookingHistory().totalNoShow();
            row[5] = student.getBookingHistory().totalConfirmed();

            dtm.addRow(row);
        }
    }
    
    private void populate(ArrayList<Employee> employees) {
        DefaultTableModel dtm = (DefaultTableModel) StudentListjTable.getModel();
        dtm.setRowCount(0);
        
        for (Employee e: employees) {
            Student student = (Student) e;
            Object[] row = new Object[dtm.getColumnCount()];

            row[0] = e.getId();
            row[1] = e;
            row[2] = student.getBookingHistory().totalClosed();
            row[3] = student.getBookingHistory().totalCanceled();
            row[4] = student.getBookingHistory().totalNoShow();
            row[5] = student.getBookingHistory().totalConfirmed();

            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        StudentListjTable = new javax.swing.JTable();
        lblStudentList = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblStudentID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 700));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));

        StudentListjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Student Name", "No of Closed", "No Of Canceled", "No Of NoShow", "No of Confirmed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(StudentListjTable);
        if (StudentListjTable.getColumnModel().getColumnCount() > 0) {
            StudentListjTable.getColumnModel().getColumn(0).setResizable(false);
            StudentListjTable.getColumnModel().getColumn(1).setResizable(false);
            StudentListjTable.getColumnModel().getColumn(2).setResizable(false);
            StudentListjTable.getColumnModel().getColumn(3).setResizable(false);
        }

        lblStudentList.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        lblStudentList.setForeground(new java.awt.Color(45, 118, 232));
        lblStudentList.setText("STUDENT LIST");

        lblName.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        lblName.setForeground(new java.awt.Color(45, 118, 232));
        lblName.setText("Name");

        txtName.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        txtName.setForeground(new java.awt.Color(45, 118, 232));

        btnSearch.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(45, 118, 232));
        btnSearch.setText("SEARCH");
        btnSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        btnSearch.setContentAreaFilled(false);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(45, 118, 232));
        btnAdd.setText("ADD STUDENT");
        btnAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        btnAdd.setContentAreaFilled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(255, 255, 255));
        btnBack.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(45, 118, 232));
        btnBack.setText("Back");
        btnBack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        btnBack.setContentAreaFilled(false);
        btnBack.setPreferredSize(new java.awt.Dimension(100, 40));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblStudentID.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        lblStudentID.setForeground(new java.awt.Color(45, 118, 232));
        lblStudentID.setText("ID");

        txtID.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        txtID.setForeground(new java.awt.Color(45, 118, 232));

        btnUpdate.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(45, 118, 232));
        btnUpdate.setText("UPDATE STUDENT");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        btnUpdate.setContentAreaFilled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(45, 118, 232));
        btnDelete.setText("DELETE");
        btnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        btnDelete.setContentAreaFilled(false);
        btnDelete.setPreferredSize(new java.awt.Dimension(76, 50));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(45, 118, 232));
        btnRefresh.setText("REFRESH");
        btnRefresh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        btnRefresh.setContentAreaFilled(false);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 120, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(31, 31, 31)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(72, 72, 72)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(lblStudentList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lblStudentList, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(81, 81, 81)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        AddStudentJPanel panel = new AddStudentJPanel(rightPanel, null, enterprise, business);
        rightPanel.add("AddStudentJPanel", panel);
        CardLayout layout = (CardLayout) rightPanel.getLayout();
        layout.next(rightPanel);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String name = txtName.getText();
        String id = txtID.getText();
        
        txtName.setBorder(new LineBorder(new Color(128, 128, 128)));
        txtID.setBorder(new LineBorder(new Color(128, 128, 128)));
        
        lblStudentID.setForeground(Color.BLACK);
        lblName.setForeground(Color.BLACK);
        
        // If no input, return
        if (name.equals("") && id.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter something to search!", "Warning", JOptionPane.WARNING_MESSAGE);
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtID.setBorder(BorderFactory.createLineBorder(Color.RED));
            populate();
            return;
        }
        
        ArrayList<Employee> employeeList = business.getNetworkList().get(0).getEnterpriseDirectory().getEnterpriseList().get(1).getEmployeeDirectory().getEmployeeList();
        ArrayList<Employee> newEmployeeList = new ArrayList<>();
        
        if(!id.equals("")){  //must be int check
            try{
              Integer.parseInt(txtID.getText());
            }catch(Exception exception){
                JOptionPane.showMessageDialog(null, "ID must be integer only! Try again with only integer value.");
                txtID.setBorder(BorderFactory.createLineBorder(Color.RED));
                lblStudentID.setForeground(Color.RED);
                return;
                }
            }
        for (Employee e: employeeList) {
            if(name.equalsIgnoreCase("")&&id.equalsIgnoreCase("")){ //both blank
                JOptionPane.showConfirmDialog(null, "Please enter something to search!!");
                txtID.setBorder(BorderFactory.createLineBorder(Color.RED));
                txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
                break;
            }
            else if(name.equalsIgnoreCase("")&&!id.equals("")){ //name blank id not blank
                
                if(e.getId()==Integer.parseInt(id)){ //name blank id match
                    newEmployeeList.add(e);
                    break;
                }
                else {
                    continue;
                }
            }    
            else if(!name.equalsIgnoreCase("")&&id.equalsIgnoreCase("")){ //only id blank
                
                if (e.getName().equalsIgnoreCase(name)) { //name match id blank
                newEmployeeList.add(e);
                break;
                }
                else {
                    continue;
                }
            }    
            else if(e.getId()==Integer.parseInt(id)&&e.getName().equalsIgnoreCase(name)){ //both match
                newEmployeeList.add(e);
                break;
            }
            else if(!name.equalsIgnoreCase("")&&id.equals("")){ //name not blank id blank
                
                if(e.getId()==Integer.parseInt(id)){ //name blank id match
                    newEmployeeList.add(e);
                    break;
                }
                else
                    continue;
            }
        }
        
        if (newEmployeeList.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No Result!", "Warning", JOptionPane.WARNING_MESSAGE);
            populate();
        }
        else {
            populate(newEmployeeList);
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        rightPanel.remove(this);
        CardLayout layout = (CardLayout)rightPanel.getLayout();
        layout.previous(rightPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = StudentListjTable.getSelectedRow();
        if (selectedRow >= 0) {
            Employee e = (Employee) StudentListjTable.getValueAt(selectedRow, 1);
            UserAccount toUpdateUserAccount = new UserAccount();
            for(UserAccount ua: business.getUserAccountDirectory().getUserAccounts()){
                if(ua.getEmployee().getName().equalsIgnoreCase(e.getName())){
                    toUpdateUserAccount=ua;
                    break;
                }
            }
            AddStudentJPanel panel = new AddStudentJPanel(rightPanel, toUpdateUserAccount, enterprise, business);
            rightPanel.add("UpdateStudentJPanel", panel);
            CardLayout layout = (CardLayout) rightPanel.getLayout();
            layout.next(rightPanel);
            }
        else {
            JOptionPane.showMessageDialog(null, "Please select any row", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = StudentListjTable.getSelectedRow();
        if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete?", "Warning", selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                Employee employee = (Employee) StudentListjTable.getValueAt(selectedRow, 1);
                UserAccount toDeleteUserAccount = new UserAccount();
                for(UserAccount ua: business.getUserAccountDirectory().getUserAccounts()){
                    if(ua.getEmployee().getName().equalsIgnoreCase(employee.getName())){
                        toDeleteUserAccount = ua;
                        break;
                    }
                }
                enterprise.getEmployeeDirectory().getEmployeeList().remove(employee);
                enterprise.getUserAccountDirectory().getUserAccounts().remove(toDeleteUserAccount);
                business.getUserAccountDirectory().getUserAccounts().remove(toDeleteUserAccount);
                
                populate();
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete!!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populate();
    }//GEN-LAST:event_btnRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable StudentListjTable;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStudentID;
    private javax.swing.JLabel lblStudentList;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
