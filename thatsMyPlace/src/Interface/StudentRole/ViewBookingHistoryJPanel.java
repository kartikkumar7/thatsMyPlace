package Interface.StudentRole;

import Business.Booking.Booking;
import Business.Booking.MasterBookingList;
import Business.Enterprise.Enterprise;
import Business.Enterprise.FacilityEnterprise;
import Business.Facility.Basketball.BasketballCourtAvailability;
import Business.Network.Network;
import Business.Student.Student;
import Business.ThatsMyPlaceSystem;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bboysticker
 */
public class ViewBookingHistoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewBookingHistoryJPanel
     */
    private JPanel rightPanel;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private ThatsMyPlaceSystem business;
    private FacilityEnterprise newFacility;
    private List<BasketballCourtAvailability> basketCourtlist;
    
    public ViewBookingHistoryJPanel(
            JPanel rightPanel, 
            UserAccount userAccount, 
            Enterprise enterprise, 
            ThatsMyPlaceSystem business) 
    {
        initComponents();
        this.rightPanel = rightPanel;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.business = business;
        this.newFacility = (FacilityEnterprise) business.getNetworkList()
                                                        .get(0)
                                                        .getEnterpriseDirectory()
                                                        .getEnterpriseList()
                                                        .get(0);
        basketCourtlist = newFacility.getBasketballCourtAvailDirectory().getList();
        populate();
    }

    public void populate() {
        FacilityEnterprise facilityEnterprise = null;
        for (Network network: business.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().equals(Enterprise.EnterpriseType.Facility)) {
                    facilityEnterprise = (FacilityEnterprise) enterprise;
                    break;
                }
            }
            if (facilityEnterprise != null) break;
        }
        
        MasterBookingList masterBookingList = facilityEnterprise.getMasterBookingList();
        
        DefaultTableModel dtm = (DefaultTableModel) bookingHistoryJTable.getModel();
        dtm.setRowCount(0);
        
        Student student = (Student) userAccount.getEmployee();
        ArrayList<Booking> bookingList = student.getBookingHistory().getBookingHistory();
        
        System.out.println("There are " + bookingList.size() + " number of bookings for this student");
        
        for (Booking booking: bookingList) {
            Object[] row = new Object[dtm.getColumnCount()];
            
            row[0] = booking.getCourtId();
            row[1] = booking.getDate();
            row[2] = booking;
            row[3] = booking.getEndTime();
            row[4] = booking.getStatus();
            row[5] = masterBookingList.isGivenFeedback(booking) ? "Given" : "Not Given";

            dtm.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bookingHistoryJTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        giveFeedbackBtn = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 700));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        bookingHistoryJTable.setForeground(new java.awt.Color(45, 118, 232));
        bookingHistoryJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Court No", "Date", "Begin Time", "End Time", "Status", "Feedback"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(bookingHistoryJTable);

        backBtn.setBackground(new java.awt.Color(45, 118, 232));
        backBtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        backBtn.setForeground(new java.awt.Color(45, 118, 232));
        backBtn.setText("Back");
        backBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        backBtn.setContentAreaFilled(false);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        giveFeedbackBtn.setBackground(new java.awt.Color(45, 118, 232));
        giveFeedbackBtn.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        giveFeedbackBtn.setForeground(new java.awt.Color(45, 118, 232));
        giveFeedbackBtn.setText("Give Feedback");
        giveFeedbackBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        giveFeedbackBtn.setContentAreaFilled(false);
        giveFeedbackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giveFeedbackBtnActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(45, 118, 232));
        btnCancel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(45, 118, 232));
        btnCancel.setText("Cancel Booking");
        btnCancel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(45, 118, 232)));
        btnCancel.setContentAreaFilled(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(34, 34, 34)
                            .addComponent(giveFeedbackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(111, 111, 111)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(giveFeedbackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        rightPanel.remove(this);
        CardLayout layout = (CardLayout)rightPanel.getLayout();
        layout.previous(rightPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void giveFeedbackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giveFeedbackBtnActionPerformed
        int selectedRow = bookingHistoryJTable.getSelectedRow();
        
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to give feedback!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        String feedbackStatus = (String) bookingHistoryJTable.getValueAt(selectedRow, 5);
        Boolean alreadyHaveFeedBack = true ? feedbackStatus.equals("Given") : false;
        
        if(alreadyHaveFeedBack == true){
            JOptionPane.showMessageDialog(null, "You have sent a feedback for this booking!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        else {
            Booking booking = (Booking) bookingHistoryJTable.getValueAt(selectedRow, 2);
            if(!booking.getStatus().equals(Booking.Status.Closed)){
                JOptionPane.showMessageDialog(null, "Booking status must be Closed to give feedback!!");
                return;
            }
            GiveFeedbackJPanel panel = new GiveFeedbackJPanel(rightPanel, userAccount, booking, enterprise, business);
            rightPanel.add("GiveFeedbackJPanel", panel);
            CardLayout layout = (CardLayout) rightPanel.getLayout();
            layout.next(rightPanel);
        }
    }//GEN-LAST:event_giveFeedbackBtnActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int selectedRow = bookingHistoryJTable.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to cancel booking", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            Booking booking = (Booking) bookingHistoryJTable.getValueAt(selectedRow, 2);
            if(!booking.getStatus().equals(Booking.Status.Confirmed)){
                JOptionPane.showMessageDialog(null, "Booking status must be Confirmed to cancel!!");
                return;
            }
            
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to cancel booking?", "Warning", selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                booking.setStatus(Booking.Status.Canceled);
                int courtID = booking.getCourtId();
                int starTime = booking.getBeginTime();
                int endTime = booking.getEndTime();
                LocalDate Date = booking.getDate();
                
                for(BasketballCourtAvailability ba : basketCourtlist){
                    if(courtID == ba.getCourtNo()
                            && starTime == ba.getStarTime() 
                            && endTime == ba.getEndTime()
                            && Date.equals(ba.getDate())
                            && ba.isIsAvailability() == false){
                        ba.change(true);
                    }
                }
                JOptionPane.showMessageDialog(null, "Booking Canceled!");
                populate();
                }
            }
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTable bookingHistoryJTable;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton giveFeedbackBtn;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
